name: Build and Release
on:
  push:
    branches:
      - master
    paths:
      - 'public/manifest.json'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install pnpm
        run: |
          npm install -g pnpm
        env:
          PNPM_HOME: ${{ runner.temp }}/pnpm-global
          PATH: ${{ runner.temp }}/pnpm-global/bin:$PATH

      - name: Set pnpm global bin directory
        run: |
          pnpm config set global-bin-dir ${{ runner.temp }}/pnpm-global/bin
          echo "${{ runner.temp }}/pnpm-global/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

      - name: Install crx
        run: pnpm install crx

      - name: Create CRX file
        run: |
          echo "${{ secrets.KEY_PEM }}" > key.pem
          node -e "
          const crx = require('crx');
          const fs = require('fs');
          const path = require('path');

          const crxFile = new crx({
            privateKey: fs.readFileSync('key.pem'),
            codebase: 'http://localhost:8000/myExtension.crx',
            rootDirectory: path.join(__dirname, 'dist')
          });

          crxFile.load()
            .then(() => crxFile.pack())
            .then(crxBuffer => {
              fs.writeFileSync(path.join(__dirname, 'myExtension.crx'), crxBuffer);
            })
            .catch(err => console.error(err));
          "

      - name: Zip dist directory
        id: zip_dist
        run: |
          zip -r dist.zip dist

      - name: Get version and name from manifest.json
        id: get_info
        run: |
          echo "version=$(node -p "require('./public/manifest.json').version")" >> $GITHUB_ENV
          echo "name=$(node -p "require('./public/manifest.json').name")" >> $GITHUB_ENV

      - name: Get changelog
        id: get_changelog
        run: |
          echo "changelog=$(awk -v RS='---' -v version=${{ env.version }} 'BEGIN {gsub("## ", "", $0)} $0 ~ version' ./CHANGELOG.md)" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.version }}
          release_name: v${{ env.version }}
          body: ${{ env.changelog }}
          draft: false
          prerelease: false

      - name: Upload CRX Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./myExtension.crx
          asset_name: ${{ env.name }}.crx
          asset_content_type: application/x-chrome-extension

      - name: Upload ZIP Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist.zip
          asset_name: ${{ env.name }}.zip
          asset_content_type: application/zip